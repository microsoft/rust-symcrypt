name: Build

on:
  push:
    branches: [ "main" ]
  pull_request:

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
        - target: x86_64-pc-windows-msvc
          os: windows-latest
          symcrypt: "https://github.com/microsoft/SymCrypt/releases/download/v103.4.2/symcrypt-windows-amd64-release-103.4.2-171f697.zip"
          run-tests: true
          command: cargo
        - target: aarch64-pc-windows-msvc
          os: windows-latest
          symcrypt: "https://github.com/microsoft/SymCrypt/releases/download/v103.4.2/symcrypt-windows-arm64-release-103.4.2-171f697.zip"
          run-tests: false # Windows doesn't support ARM64 emulation
          command: cargo # cross doesn't support Win ARM64
        - target: x86_64-unknown-linux-gnu
          symcrypt: "https://github.com/microsoft/SymCrypt/releases/download/v103.4.2/symcrypt-linux-generic-amd64-release-103.4.2-171f697.tar.gz"
          os: ubuntu-latest
          run-tests: true
          command: cargo
        - target: aarch64-unknown-linux-gnu
          os: ubuntu-latest
          symcrypt: "https://github.com/microsoft/SymCrypt/releases/download/v103.4.2/symcrypt-linux-generic-arm64-release-103.4.2-171f697.tar.gz"
          run-tests: false
          command: cross
            
    runs-on: ${{ matrix.os }}
    name: ${{ matrix.target }}    
    env:
      CARGO_BUILD_TARGET: ${{ matrix.target }}
    
    steps:
    - uses: actions/checkout@v4

    - name: Install host target
      if: ${{ matrix.command }} != 'cross'
      shell: pwsh
      run: rustup target add ${{ matrix.target }}

    - name: Install cross
      if: ${{ matrix.command }} == 'cross'
      uses: taiki-e/install-action@v2
      with:
        tool: cross

    - name: Download SymCrypt
      shell: pwsh
      run: |
        $dir = $(Get-Item .).FullName
        if ("${{ matrix.symcrypt }}" -match "\.tar\.gz$") {
          Invoke-WebRequest -Uri ${{ matrix.symcrypt }} -OutFile symcrypt.tar.gz
          New-Item -ItemType Directory -Force -Path symcrypt
          tar -xzf symcrypt.tar.gz -C symcrypt
          echo "$dir/symcrypt/lib" >> $env:GITHUB_PATH
          echo "LD_LIBRARY_PATH=$dir/symcrypt/lib:$env:LD_LIBRARY_PATH" >> $env:GITHUB_ENV
          echo "LIBRARY_PATH=$dir/symcrypt/lib:$env:LIBRARY_PATH" >> $env:GITHUB_ENV
          echo "SYMCRYPT_LIB_PATH=$dir/symcrypt/lib" >> $env:GITHUB_ENV
        } else {
          Invoke-WebRequest -Uri ${{ matrix.symcrypt }} -OutFile symcrypt.zip
          New-Item -ItemType Directory -Force -Path symcrypt
          Expand-Archive -Path symcrypt.zip -DestinationPath symcrypt
          echo "$dir/symcrypt/dll" >> $env:GITHUB_PATH
          echo "SYMCRYPT_LIB_PATH=$dir/symcrypt/dll" >> $env:GITHUB_ENV   
        }

    - name: Debug build
      run:  ${{ matrix.command }} build --locked --verbose --target ${{ matrix.target }}
    
    - name: Release build
      run: ${{ matrix.command }} build --release --locked --verbose --target ${{ matrix.target }}

    - name: Run tests (Debug)
      if: matrix.run-tests
      shell: pwsh
      run: ${{ matrix.command }} test --locked --verbose --target ${{ matrix.target }}

    - name: Run tests (Release)
      if: matrix.run-tests
      shell: pwsh
      run: ${{ matrix.command }} test --release --locked --verbose --target ${{ matrix.target }}
